1) Более подробно про опыт


2) Причина вхождения в DevOps


3) Теория сетей. Траблшутинг сети

№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№ ТЕОРИЯ СЕТЕЙ №№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

1. Уровни эталонной модели OSI?

      Физический уровень (уровень 1): преобразование битов данных в электрические импульсы.
      Уровень канала передачи данных (уровень 2): биты из пакета данных будут кодироваться и декодироваться.
      Сетевой уровень (уровень 3): обмен дейтаграммами между двумя сторонами.
      Транспортный уровень (уровень 4): отвечает за передачу данных между сторонами.
      Сеансовый уровень (уровень 5): организует и регулирует трафик компьютерных сигналов.
      Уровень представления (уровень 6): форматирование данных для прикладного уровня.
      Уровень приложения (уровень 7): Уровень приложения и конечный пользователь будут обмениваться данными.

---

2. Что такое TCP?
      Протокол управления передачей/Интернет-протокол иногда называют TCP или TCP/IP. Набор правил определяет, как компьютер подключается к Интернету и передает данные по сети.
      Когда к сети подключено много компьютеров, она создает виртуальную сеть и использует технику трехэтапного рукопожатия для установления соединения, что делает его более надежным.

---

3. Что означает UDP?
      Протокол пользовательских дейтаграмм (UDP) основан на дейтаграммах. Он в основном используется для широковещательной и многоадресной рассылки.
      За исключением трех методов квитирования и проверки ошибок, его работа почти идентична работе протокола TCP/IP.
      Он использует прямую передачу без рукопожатия, что снижает его надежность.
---

4. Что такое протокол DHCP?

      Протокол динамической конфигурации хоста известен как DHCP. Это протокол прикладного уровня, который автоматически настраивает сетевые IP-устройства, чтобы они могли использовать протоколы на основе TCP и UDP.
      Устройства могут обмениваться данными через IP-сеть, поскольку DHCP-серверы автоматически выдают IP-адреса и другие сетевые параметры.
      Это помогает в получении IP-адреса, маски подсети и разрешения DNS. По умолчанию используется порт 67.

---

5. Как происходит https-соединение?

      Когда вы вводите адрес сайта в браузере, он спрашивает у сервера, установлен ли для сайта сертификат. 
      В ответ сервер отправляет общую информацию об SSL-сертификате и публичный ключ, то есть сам сертификат. Браузер сверяет информацию со списком авторизованных центров сертификации. 
      Если всё в порядке, браузер генерирует сеансовый ключ, зашифровывает его публичным ключом и отправляет на сервер. Сервер расшифровывает сообщение и сохраняет сеансовый ключ. 
      После этого между браузером и сайтом устанавливается безопасное соединение через протокол HTTPS.

---

6. Зачем нужен протокол DNS? На каком уровне OSI он работает? Как в определяется порядок источников для разрешения имен?

---

7. Какой уровень иерархии у server для домена main.server.foxtree.dev?
   3-й уровень.
   Следует отметить, что количество уровней может достигать 128!

---

6. Основные DNS записи:
      Тип 	Расшифрока 	Описание
      A 	Address 	Адресная запись, соответствие между именем и IP-адресом.
      AAAA 	Address v6 	Аналог A записи для IPv6 адресов.
      CNAME 	Canonical Name 	Каноническое имя для псевдонима (одноуровневая переадресация)
      MX 	Mail Exchanger 	Адрес почтового шлюза для домена. Состоит из двух частей — приоритета (чем число больше, тем ниже приоритет), и адреса узла.
      NS 	Authoritative name server 	Адрес узла, отвечающего за доменную зону. Критически важна для функционирования самой системы доменных имён.
      PTR 	Pointer 	Соответствие адреса имени — обратное соответствие для A и AAAA.
      SOA 	Start of authority 	Указание на авторитетность информации, используется для указания на новую зону.
      TXT 	Text string 	Запись произвольных двоичных данных, до 255 байт в размере.
      SPF 	Sender Policy Framework 	Указывает серверы, которые могут отправлять почту с данного домена.

      DomainKeys Identified Mail (DKIM) — метод E-mail аутентификации, разработанный для обнаружения подделывания сообщений, пересылаемых по email.
      Метод дает возможность получателю проверить, что письмо действительно было отправлено с заявленного домена. DKIM упрощает борьбу с поддельными адресами отправителей, которые часто используются в фишинговых письмах и в почтовом спаме.

      Domain-based Message Authentication, Reporting and Conformance (идентификация сообщений, создание отчётов и определение соответствия по доменному имени) 
        или DMARC — это техническая спецификация, созданная группой организаций, предназначенная для снижения количества спамовых и фишинговых электронных писем, основанная на идентификации почтовых доменов отправителя на основании правил и признаков, заданных на почтовом сервере получателя.

      Информация о DKIM и DMARC устанавливается в TXT записи домена.

---

7. Что такое RoundRobin DNS как работает?
      Round-robin - алгоритм распределения нагрузки распределенной вычислительной системы методом перебора и упорядочения её элементов по круговому циклу.

      Round-robin DNS работает, отвечая на запросы не только одним IP-адресом, а списком из нескольких адресов серверов, предоставляющих идентичный сервис.
      Порядок, в котором возвращаются IP-адреса из списка, основан на алгоритме Round-robin. То есть на практике на доменное имя назначаются несколько IP адресов серверов, которые отвечают на запросы.

---

8. Для чего используется протокол ICMP?

      ICMP, который расшифровывается как Internet Control Message Protocol это протокол третьего уровня модели OSI, который используется для диагностики проблем со связностью в сети. 
      Протокол помогает определить может ли достичь пакет адреса назначения в установленные временные рамки. Обычно, ICMP “юзают" маршрутизаторы и устройства третьего уровня.

---

9. Как работает ping
    Схера работы:
    Источник отправляет запрос вида ICMP echo request. Это выглядит как вопрос “бро, ты живой?"
    Получатель отправляет ответ источнику ICMP echo reply. Это звучит как ответ вида “да, бро, я жив, спасибо!"
    Время с момента отправки вопроса до получения ответа суммируется и считается за время пинга

---

10. Темная сторона ICMP

      На самом деле, с помощью ICMP можно провести атаки на сеть. Эти атаки связаны с отказом устройства в обслуживании (denial-of-service, DoS). 
      Например “флуд - атака", суть которой заключается в отправке огромного количества пинг (ICMP) - запросов на хоста назначения с разных источников. 
      В итоге устройство отвечает кучей пакетов на разные адреса и перегружает собственные мощности и сетевой адаптер.

---

11. На каком порту работает ICMP?
      ICMP отличается от транспортных протоколов, поскольку ICMP не используется для обмена данными между системами. Ping использует пакеты ICMP, а ICMP не использует номера портов, что означает, что порт не может быть опрошен.30 июн. 2021 г

---

12. Особенности протокола HTTP/1.1
      Нововведения в HTTP/1.1:
      Новые методы в этой версии:

          PUT заменяет все текущие представления сущности данными запроса. Например, в блоге можно заменить данные поста, который ранее был опубликован;
          DELETE удаляет указанную сущность;
          OPTIONS описывает параметры соединения с ресурсом;
          TRACE проверяет обратную связь по пути к целевому ресурсу, предоставляет полезный механизм для отладки запроса.

      Позже добавили ещё два метода: 
          CONNECT устанавливает «туннель» к серверу, определённому по ресурсу.
          PATCH частично изменяет указанную сущность данными из запроса.

      Еще одним нововведением стало кеширование запрашиваемых ресурсов на стороне клиента. При следующем запросе они отдаются сразу из кеша, а время на загрузку сокращается.


      Виртуальные хосты
          До появления этого механизма на одном IP-адресе можно было располагать только один сайт. 
          Стандартизированного способа разместить несколько сайтов на одной машине не было. Теперь появился обязательный заголовок Host. Он указывает на домен, с которого пришел запрос на веб-сервер. 
          Сервер определяет хост по этому заголовку и решает, какие данные отправить клиенту.


      keep-alive

          Чтобы передать данные по протоколу HTTP, надо установить TCP/IP соединение между клиентом и сервером. 
          Оно устанавливается перед каждым запросом, а после выполнения запроса — закрывается. 
          Эта операция требует ресурсов процессора на сервере и занимает время. Если сайтом пользуется несколько сотен человек или на странице загружаются несколько ресурсов — это незаметное явление. 
          Но если сайтом начнут пользоваться миллионы пользователей, сервер не справится с нагрузкой, надо будет ставить железо помощнее. 
          То же самое произойдет, если сайт сложный, с сотнями ресурсов. Пользователи будут долго ждать загрузку страниц.

          Эту проблему пытались решить еще в версии протокола 1.0, использую специальное расширение keep-alive, которое позволяло создавать постоянные соединения. Такие соединения не закрываются после первого запроса и остаются открытыми для нескольких последующих.
          Так за одно соединение можно запросить несколько ресурсов, не перегрузить сервер и ускорить загрузку страниц.


          Для того, чтобы механика работала, клиент должен был отправить в запросе к серверу заголовок Connection: keep-alive. 
          Сервер же в ответе на запрос также должен был добавить этот заголовок. 
          В таком случае, клиент будет использовать созданное TCP/IP соединение для отправки последующих запросов до тех пор, пока в запросе или ответе не будет передан заголовок Connection: close.

          В HTTP/1.1 этот подход стандартизировали и все запросы по умолчанию стали keep-alive, без необходимости передавать дополнительные заголовки.

---

13. Для чего в HTTP используются заголовки?

      Заголовки HTTP позволяют клиенту и серверу отправлять дополнительную информацию с HTTP запросом или ответом. 
      В HTTP-заголовке содержится не чувствительное к регистру название, а затем после (:) непосредственно значение.
      Пробелы перед значением игнорируются.
      
---

14. Какие группы заголовков http?

  Все заголовки разделяются на четыре основных группы:

    General Headers (рус. Общие заголовки) — используются в запросах и ответах.
       Date, Cache-Control, Connection.

    Request Headers (рус. Заголовки запроса) — используются только в запросах.
       Host, User-Agent

    Response Headers (рус. Заголовки ответа) — используются только в ответах.
       Age, Location, Server

    Entity Headers (рус. Заголовки сущности) — сопровождают каждую сущность сообщения. Используются в запросах и ответах.
       Content-Length 

---

15. На каком уровне модели OSI находится Web-socket?
    7-й - прикладной уровень.

---

16. Отличия протоколов HTTP от Web-socket?

    Протокол HTTP однонаправленный. 
    После цикла «запрос — ответ» соединение закрывается, а любой следующий запрос каждый раз устанавливает новое соединение с сервером: сколько запросов, столько и соединений.
    Процесс передачи данных происходит с некоторыми задержками за счет того, что есть накладные расходы на установку нового соединения при каждом запросе/ответе, а также сетевая и серверная нагрузка из-за обилия периодических запросов.
    
    Протокол WebSocket двунаправленный, полнодуплексный, что означает, что он может одновременно и получать, и передавать информацию.
    Веб-сокет делает это множество раз в одном открытом соединении. У такого соединения и скорость выше, чем у HTTP.

---

17. Описать процесс установки соединения по WS?

    WebSocket — протокол поверх единственного TCP-соединения, предназначенный для двустороннего обмена сообщениями. Подходит для написания приложений реального времени.
    Протокол состоит из двух частей: открытия соединения (handshake) и обмена данными.

    Клиент отправляет запрос на открытие, сервер отвечает. Если открытие соединения прошло успешно, то клиент и сервер могут начать обмениваться сообщениями (messages) по двустороннему каналу связи.

    Протокол WebSocket использует существующую HTTP-инфраструктуру и технологии (прокси, аутентификация). 
    Поддерживает работу поверх стандартных HTTP-портов 80, 443. 
    Поэтому открытие соединения происходит в HTTP среде и сервер на единственном порту может обслуживать HTTP-запросы и WebSocket-клиентов. 
    Открытие соединения начинается с HTTP Upgrade запроса.
    
      Connection:[Upgrade]
      Upgrade:[websocket]

---

№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№ NGINX №№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

---

1. Вывод количества самых активных ip-адресов за последнее время из access.log
      less /var/log/nginx/access.log | cut -d' ' -f1 | sort | uniq -c

---

2. Чем ограничивается количество соединений соединений в nginx?
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)

---

3. В каком блоке задаётся worker_connections?
    events { }

---

4. Для чего используется модуль upstream в nginx?
    Описывает группу серверов. Серверы могут слушать на разных портах. Кроме того, можно одновременно использовать серверы, слушающие на TCP- и UNIX-сокетах.

---

5. Как настроить keep-alive для upstream в nginx?
      Указать директивы:
      proxy_http_version 1.1;
      proxy_set_header Connection "";

      upstream {
        hash $cookie_val consistent;
        keepalive 60; # for 30 upstreams;
      }

---

6. Методы балансировки в NGINX (не nginx+)
    Round Robin.
    Hash.
    IP Hash.
    Least Connections.
    Random.
    Least Time (только в платной версии NGINX).

---

7. Как ограничить количество соединений для сервера в upstream?
      Указать max_conns.

---

8. Для чего используется weight в nginx?
      Для указания приоретизации подключения.

№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№ LINUX №№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

4) Базовые команды linux. Траблшутинг

---

1. Что такое LA? В каких единицах измеряется?
      LA (load average) -- параметр, определяющий среднюю нагрузку на систему за период времени (1 мин, 5 минут, 15 минут). Изменяется в количестве задач на одно ядро процессора. 
      На нагрузку системы также влияет количество задач ввода-вывода и задержка сети. 
      Также влияние на расчета LA оказывает: 
        1. Технология Hyper-Threading, которая делит одно физическое ядро на 2 логических, 
        2. Технология Turbo Bust, которая позволяет разгонять тактовую частоту процессора и работать на частоте выше заявленной, т.е. выше номинальной частоты (время на обработку одной задачи уменьшается). 

---

2. Для чего нужна переменная окружения PATH?
      Переменная окружения PATH содержит абсолютные пути директорий, в которых производится поиск исполняемых файлов при вводе команд

---

3. В чем разница между объявлением переменной export VAR="VALUE" и VAR="VALUE" в bash?
      При объявлении переменной через export - переменная будет доступна в любых других процессах, при обычном объявлении переменной - переменная будет доступна только в запущенном процессе.

---

4. Какой код сигнала будет выполнен при исполнении команды kill <PID>

  Сигнал SIGTERM (код 15) - это сигнал по-умолчанию отправляемый при вызове команды kill. Это указывает процессу на завершение работы и обычно считается сигналом для использования при чистом завершении работы.

---

5. Как выполнить фильтрацию вывода команды, чтобы на экран были выведены только ошибки (STDERR), игнорируя STDOUT?

      cmd 2>&1 >/dev/null | grep pattern
---

6. Какую команду необходимо выполнить, чтобы посмотреть какие пользователи вошли в систему в систему?
      Команда w покажет список пользователей, которые вошли на сервер.
---

7. Системный вызов - обращение программы к ядру операционной системы для выполнения какой-либо операции.

    В Unix, Unix-like и других POSIX-совместимых операционных системах популярными системными вызовами являются:

    open,
    read,
    write,
    close,
    wait,
    exec,
    fork,
    exit,
    kill.

---

8. Что такое сигнал в Unix, зачем они нужны и разница между 9 и 15 сигналами?
      Сигнал - в Unix-like операционных системах - асинхронное (в случайное время) уведомление процесса для обработки какого-либо события. Один из основных способов взаимодействия между процессами.
      Посылка сигналов от одного процесса к другому обычно осуществляется при помощи системного вызова kill. Его первый параметр – PID процесса, которому посылается сигнал; второй параметр – номер сигнала.

      kill(1111, SIGTERM);
        Стандарт POSIX определяет 28 сигналов. Некоторые из них:
        Сигнал 	Код 	Описание
        SIGTERM 	15 	Сигнал завершения (сигнал по умолчанию для утилиты kill)
        SIGKILL 	9 	Безусловное завершение
        SIGSTOP 	23 	Остановка выполнения процесса
        SIGHUP 	1 	Закрытие терминала (перечитать конфигурацию)
        SIGINT 	2 	Сигнал прерывания (Ctrl-C) с терминала

---

9. Что такое buffer/cache память? Для чего нужна?
    buff/cache память - рассчитанная память, которая зарезервирована, но может быть освобождена при необходимости и используется для быстрого доступа программами к данным, которые находятся в оперативной памяти (быстрой памяти).

    buffers — буферы в памяти — страницы памяти, зарезервированные системой для выделения их процессам, когда они затребуют этого, так же известна как heap-memory; 
    cached — файлы, которые недавно были использованы системой/процессами и хранящиеся в памяти на случай если вскоре они снова потребуются.

    Представлен вывод команды free.

    $ free -m
                  total        used        free      shared  buff/cache   available
    Mem:           6930        3598         843         183        2489        2919
    Swap:         15999           4       15995

---

10. Что такое systemd?

systemd – это набор базовых строительных блоков для системы Linux. Он предоставляет диспетчер систем и служб, который работает как PID 1 и запускает остальную часть системы. systemd предоставляет агрессивные возможности распараллеливания, использует активацию сокетов и D-Bus для запуска служб.

---

11. Юниты systemd

    target — группирует модули
    service — отвечает за запуск сервисов (служб) и поддерживает вызов интерпретаторов для исполнения пользовательских скриптов
    mount — занимается монтированием файловых систем
    automount — автомонтирование файловых систем, используется при обращении к точке монтирования;
    swap — отвечает за подключение файла подкачки
    timer — запускает модули по расписанию, аналог cron
    socket — запуск модуля при подключению к сокету
    slice — группировка других модулей в контейнер (дерево) cgroups
    device — использует реакцию на подключение какого-либо устройства
    path — запуск модуля по событию доступа по конкретному пути в файловой систем

---

12. Сервис потребляет много RAM, уходит в swap. Что можно предпринять?

      /etc/default/grub <- GRUB_CMDLINE_LINUX=" ... transparent_hugepage=never ..."

---

13. Для чего используется LVM?
      Logical Volume Manager (LVM) - Cистема управления томами с данными для Linux. Она позволяет создавать поверх физических разделов (или даже неразбитых винчестеров) логические тома.
      Позволяет динамически менять размер логических разделов на лету, создавать снимки (снапшоты) и т. д.

---

14. В CentOS не резолвятся имена при попытки обновить пакетный менеджер. Что следует проверить?
      Проверить начилие DNS nameserver в /etc/resolv.conf

---

№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№ FIREWALL №№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

1. C какими firewall`s довелось работать?

    iptables
    firewall-cmd
    ufw
    
---

2. Назвать 4 основные таблицы iptables?
    filter
    nat
    mangle
    raw
    security

---

2. Какие цепочки в таблице filter?
    PREROUTING - используется для всего входящего трафика до принятия первого решения о маршрутизации
    INPUT - применяется для входящего трафика текущего
    FORWARD - через нее проходит транзитный трафик
    OUTPUT -  применятся для исходящего трафика текущего узла
    POSTROUTING - используется для всего исходящего трафика после принятия всех решений о маршрутизации

---

4. Что используется для управления firewalld.
    Зоны.
    Зона может содержать несколько сетевых подключений, но сетевое соединение может входить только в одну зону. 
    Список всех зон получаем командой firewall-cmd --get-zones.

---

5. Какие зоны создаются по-умолчанию?
    trusted — все сетевые соединения разрешены;
    work/home/internal — зоны похожи по настройкам, отличаются назначением. Устанавливается максимальное доверие к компьютерам в сети, разрешается устанавливать только конкретные входящие соединения
    dmz — для компьютеров, находящихся в демилитаризованной зоне, доступные из Сети и с ограниченным доступом к внутренней сети. Разрешаются только указанные входящие соединения (по умолчанию SSH);
    external — правило, подходящее для роутеров, для использования во внешних сетях с разрешенным маскарадингом, с максимальным недоверием и четко установленными разрешенными входящими соединениями (по умолчанию SSH);
    public — для использования в общественных местах, с максимальным недоверием к другим компьютерам, разрешены только конкретные входящие соединения (по умолчанию SSH и DHCPv6 client);
    block — входящие сетевые соединения отклоняются с icmp-host-prohibited сообщением, разрешены только соединения, инициированные в этой системе;
    drop — разрешаются только исходящие соединения, все входящие блокируются.

---

6. Как создать новую зону?
    # firewall-cmd --permanent --new-zone=zone_name

---

№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№ GIT №№№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

---

1. GitFlow - модель ветвления Git.
    Ключевые идеи:

    Данная модель отлично подходит для организации рабочего процесса на основе релизов,
    Gitflow предлагает создание отдельной ветки для исправлений ошибок в продуктовой среде.

    Последовательность работы при использовании модели Gitflow:
        Из master создается ветка develop.
        Из develop создаются ветки feature.
        Когда разработка новой функциональности завершена, она объединяется с веткой develop.
        Из develop создается ветка release.
        Когда ветка релиза готова, она объединяется с develop и master.
        Если в master обнаружена проблема, из нее создается ветка hotfix.
        Как только исправление на ветке hotfix завершено, она объединяется с develop и master.

---

2. Чем merge отличается от rebase?
      git merge - выполняет слияние коммитов из одной ветки в другую. В этом процессе изменяется только целевая ветка. История исходных веток остается неизменной.
      git rebase - сжимает все изменения в один патч. Затем интегрирует патч в целевую ветку. 
      В отличии от merge, rebase перезаписывает историю, потому что она передаётся завершенную работу из одной ветки в другую. В процессе устраняется нежелательная история.

---

3. В репозиторий запушен коммит с изменениями в двух файлах. Как откатить изменения этого коммита?
      git revert

---


№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№ DOCKER №№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

---

1. Какие инструкции есть у Dockerfile?

    Инструкция 	Описание
    FROM 	Задаёт базовый (родительский) образ.
    LABEL 	Описывает метаданные. Например — сведения о том, кто создал и поддерживает образ.
    ENV 	Устанавливает постоянные переменные среды.
    RUN 	Выполняет команду и создаёт слой образа. Используется для установки в контейнер пакетов.
    COPY 	Копирует в контейнер файлы и директории.
    ADD 	Копирует файлы и директории в контейнер, может распаковывать локальные .tar-файлы, добавляет git-репозитории.
    CMD 	Описывает команду с аргументами, которую нужно выполнить когда контейнер будет запущен. Аргументы могут быть переопределены при запуске контейнера. В файле может присутствовать лишь одна инструкция CMD.
    WORKDIR 	Задаёт рабочую директорию для следующей инструкции.
    ARG 	Задаёт переменные для передачи Docker во время сборки образа.
    ENTRYPOINT 	Предоставляет команду с аргументами для вызова во время выполнения контейнера. Аргументы не переопределяются.
    EXPOSE 	Указывает на необходимость открыть порт.
    VOLUME 	Создаёт точку монтирования для работы с постоянным хранилищем.

---

2. Чем отличается COPY от ADD в Dockerfile?
    Инструкция COPY копируют файлы и директории с хостовой машины внутрь контейнера, инструкция ADD копирует файлы и директории с хостовой машины внутрь контейнера и может распаковывать .tar архивы.

---

3. Какие есть best practices для написания Dockerfile?
      Запускать только один процесс на контейнер.
      Стараться объединять несколько команд RUN в одну для уменьшения количества слоёв образа.
      Частоизменяемые слои образа необходимо располагать ниже по уровню, чтобы ускорить процесс сборки, т.к. при изменении верхнего слоя, все нижеследующие слои будут пересобираться.
      Указывать явные версии образов в инструкции FROM, чтобы избежать случая, когда выйдет новая версия образа с тегом latest.
      При установке пакетов указывать версии пакетов.
      Очищать кеш пакетного менеджера и удалять ненужные файлы после выполненной инструкции.
      Использовать multistage build для сборки артифакта в одном контейнере и размещении его в другом.

---

4. Основные драйвера сетей docker: bridge, host, overlay, ipvlan, macvlan, none

      bridge: это сетевой драйвер по умолчанию. Бридж сеть используется, когда ваши приложения запускаются в автономных контейнерах, которые должны взаимодействовать между собой. 
      Взаимодействие с хостом выполняется через мост docker0 и конфигурацию таблицы iptables nat. 
      В этом режиме будет выделено сетевое пространство имен, задан IP-адрес для каждого контейнера, а контейнер Docker на хосте будет подключен к виртуальному мосту. 
      Виртуальный мост работает как физический коммутатор, поэтому все контейнеры на хосте подключены к сети уровня 2 через коммутатор.

      host: использует сеть хоста напрямую без изоляции контейнера и хоста.

      none: этот режим помещает контейнер в свой собственный сетевой стек, но не выполняет никакой настройки. 
      Фактически, этот режим отключает сетевую функцию контейнера, что полезно в следующих двух ситуациях: контейнер не требует сети (например, только для пакетной задачи записи дисковых томов).

      overlay: Оверлейные сети соединяют несколько демонов Docker вместе и позволяют сервисам swarm взаимодействовать друг с другом.
      Вы также можете использовать оверлейные сети для облегчения связи между сервисом swarm и автономным контейнером или между двумя автономными контейнерами в разных демонах Docker. 
      Эта стратегия устраняет необходимость выполнять маршрутизацию между этими контейнерами на уровне ОС.
 
---

5. Синтаксис описания volume. Именованый volume?
      - fs-certs:/usr/local/freeswitch/conf/ssl
      - /etc/localtime:/etc/localtime:ro
---

6. Где по-умолчанию хранятся volumes?
      /var/lib/docker/volumes

---

№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№ SWARM №№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

0. Для чего исползуется оркестратор?

---

1. Что такое service в Swarm?
      Один или несколько контейнеров

---

2. Как просмотреть логи по сервису?

      docker service logs

---

3. Как просмотреть логи по одному сервису?

      docker service ps SERVICE NAME
      docker service logs -f SERVICE_ID

---

4. Типы токенов в Swarm?
      join-manager и join-worker

---

5. Чем чревато наличие одного менеджера на кластере Swarm?
      Стоит ли создавать 3 менеджера?

---

6. *Производительность overlay-сетей. Как улучшить?



№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№ MONITORING №№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

1. Какой тип базы данных использует Prometheus?
    Prometheus использует TSDB (time series database).

---

2. Концеция построения мониторинга в связке expoter -> promtheus -> grafana?

---

3. Какие exporters ещё использовались?

---

4. Где задать таргеты для Prometheus?
    /etc/prometheus/prometheus.yaml

---

5. Как обеспечить персистентность данных в Prometheus?
      volume для /prometheus/_data

---

6. *Как разделить таргеты нескольких серверов для Prometheus при отображении в Dashboard?

      Как вариант создать по контейнеру на сервер, со своими таргетами.

---

№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№ ANSIBLE №№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

---

0. Две модели для систем управления конфигурациями? По какой модели работает Ansible?
    pull - через агента
    push - с мастер-сервера (Ansible)

---

1. Как создать директорию на удалённой машине с использованием Ansible?
    Модуль file со статусом: present (absent - удалить)
    Модули shell, bash, raw

2. Чем отличаются Ansible модули raw, command и shell?
    Модуль raw отличается от command и shell тем, что не выполняет дополнительную обработку выполнения команды. 
    Эти дополнительные обработки присутствуют в почти любом модуле Ansible. 
    Модуль raw передает команду, как есть, в "сыром" (raw) виде без проверок. 
    Модули command и shell отличаются тем, что в модуле command команда выполняется без прохождения через командную оболочку /bin/sh. 
    Поэтому переменные определенные в оболочке и перенаправления - конвееры (|) работать не будут. 
    Модуль shell выполняет команды через оболочку по умолчанию /bin/sh. Поэтому там будут доступны переменные оболочки (env) и перенаправления.

---

3. На всех серверах должен быть набор пользователей, с доступом по ssh-ключу, стандартный модуль user не позволяет вносить ssh ключ в authorized_keys. Предложите решение.

    * Использовать модуль authorized_key для добавления ключей.
    * Использовать модуль shell, чтобы вручную с использованием команды cat {{ PUBLIC_SSH_KEY }} >> /home/{{ USER }}/.ssh/authorized_keys добавить ключ. 
      В данном случае шаблоны Jinja2 PUBLIC_SSH_KEY и USER должны быть заданы

---

4. Есть группы пользователей, которые должны заводиться не на всех серверах. Как ограничить заведение пользователей?
    Сгруппировать сервера, на которых должны заводиться группы пользователей, в инвентори (yaml) или написать в плейбуке условие (when), которому передаётся список серверов, на которых необходимо выполнить задачу.

---

5. Что такое роль в Ansible? Что содержит в себе Ansible роль?

    Ansible роль представляет собой структурированный плейбук, содержащий, как минимум, набор задач (tasks) 
      и дополнительно - обработчики событий (handlers), 
      переменных (default и vars), 
      файлов (files), 
      шаблонов (templates), 
      описание и зависимости (metadata) и тесты (tests).

---

6. В Ansible роли есть директории file и templates. Что они содержат и чем отличаются?

  files - содержит файлы, которые будут скопированы на настраиваемые хосты; так же — может содержать скрипты, которые позже будут запускаться на хостах.
  templates - содержит шаблоны файлов с переменными.

---

7. В Ansible роли есть директории file и templates. Что они содержат и чем отличаются?
    Необходимо установить параметр serial: 1, чтобы определить количество хостов, на которых будут выполняться паралелльно задачи. Значение 1 будет значить, что все задачи будут проходить параллельно по 1 хосту за раз.

---

8. Для чего используется forks?
    Для параллельного выполнения команд.

---

9. Как при помощи модуля line_in_file записать дублирущиеся строки?
      Использовать block_in_file
      line_in_file проверяет наличие указанной строки в файле


№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№ DISTRIBUTED SYSTEMS №№№№№№№№№№№№№№№№№№№
№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№
    
Что такое data consistency?
    
      «Согласованность данных (иногда консистентность данных, англ. data consistency) — согласованность данных друг с другом, целостность данных, а также внутренняя непротиворечивость.»
      Согласованность подразумевает, что в любой момент времени приложения могут быть уверены, что работают с корректной, технически актуальной версией данных, и могут расчитывать на нее при принятии решений.


«Теорема CAP (известная также как теорема Брюера) — эвристическое утверждение о том, что в любой реализации распределённых вычислений возможно обеспечить не более двух из трёх следующих свойств:

    согласованность данных (англ. consistency) — во всех вычислительных узлах в один момент времени данные не противоречат друг другу;
    доступность (англ. availability) — любой запрос к распределённой системе завершается корректным откликом, однако без гарантии, что ответы всех узлов системы совпадают;
    устойчивость к разделению (англ. partition tolerance) — расщепление распределённой системы на несколько изолированных секций не приводит к некорректности отклика от каждой из секций.»

